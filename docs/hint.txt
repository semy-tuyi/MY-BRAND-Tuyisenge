/ DOM Elements
const studentForm = document.getElementById("studentForm");
const studentsContainer = document.querySelector(".students");
const nameInput = studentForm["name"];
const ageInput = studentForm["age"];
const rollInput = studentForm["roll"];

/* 
{
  name: '',
  age: number,
  roll: number
}
*/

const students = JSON.parse(localStorage.getItem("students")) || [];

const addStudent = (name, age, roll) => {
  students.push({
    name,
    age,
    roll,
  });

  localStorage.setItem("students", JSON.stringify(students));

  return { name, age, roll };
};

const createStudentElement = ({ name, age, roll }) => {
  // Create elements
  const studentDiv = document.createElement("div");
  const studentName = document.createElement("h2");
  const studentAge = document.createElement("p");
  const studentRoll = document.createElement("p");

  // Fill the content
  studentName.innerText = "Student name: " + name;
  studentAge.innerText = "Student age: " + age;
  studentRoll.innerText = "Student roll: " + roll;

  // Add to the DOM
  studentDiv.append(studentName, studentAge, studentRoll);
  studentsContainer.appendChild(studentDiv);

  studentsContainer.style.display = students.length === 0 ? "none" : "flex";
};

studentsContainer.style.display = students.length === 0 ? "none" : "flex";

students.forEach(createStudentElement);

studentForm.onsubmit = e => {
  e.preventDefault();

  const newStudent = addStudent(
    nameInput.value,
    ageInput.value,
    rollInput.value
  );

  createStudentElement(newStudent);

  nameInput.value = "";
  ageInput.value = "";
  rollInput.value = "";
};

// hint 2
const signUp = e => {
    let fname = document.getElementById('fname').value,
        lname = document.getElementById('lname').value,
        email = document.getElementById('email').value,
        pwd = document.getElementById('pwd').value;

        //retrieve data from local storage as object
    let formData = JSON.parse(localStorage.getItem('formData')) || [];

    let exist = formData.length && 
        JSON.parse(localStorage.getItem('formData')).some(data => 
            data.fname.toLowerCase() == fname.toLowerCase() && 
            data.lname.toLowerCase() == lname.toLowerCase()
        );

    if(!exist){
        formData.push({ fname, lname, email, pwd });
        // store data in local storage as string value 
        // local storage store data as string value
        localStorage.setItem('formData', JSON.stringify(formData));
        document.querySelector('form').reset();
        document.getElementById('fname').focus();
        alert("Account Created.\n\nPlease Sign In using the link below.");
    }
    else{
        alert("Ooopppssss... Duplicate found!!!\nYou have already sigjned up");
    }
    e.preventDefault();
}

function signIn(e) {
    let email = document.getElementById('email').value, pwd = document.getElementById('pwd').value;
    let formData = JSON.parse(localStorage.getItem('formData')) || [];
    let exist = formData.length && 
    JSON.parse(localStorage.getItem('formData')).some(data => data.email.toLowerCase() == email && data.pwd.toLowerCase() == pwd);
    if(!exist){
        alert("Incorrect login credentials");
    }
    else{
        location.href = "/";
    }
    e.preventDefault();
}

// ck editor 5
let theEditor;

ClassicEditor.create(document.querySelector("#contentDetails"), {
  ckfinder: {
    uploadUrl:
      "/ckfinder/core/connector/php/connector.php?command=QuickUpload&type=Files&responseType=json",
  },
  mediaEmbed: {
    previewsInData: true,
  },
})
  .then((editor) => {
    theEditor = editor;
  })
  .catch((error) => {
    console.error(error);
  });

function getDataFromTheEditor() {
  return theEditor.getData();
}

function showtext() {
    console.log(getDataFromTheEditor());
  }


// other local storage hint
CKEDITOR.replace("body");

    if (localStorage.getItem("updateId")) {
      let id = localStorage.getItem("updateId");

      document.getElementById("cover").style.display = "none";
      document.getElementById("submitBtn").value = "UPDATE";

      var articles = JSON.parse(localStorage.getItem("articles"));
      var articleToUpdate = articles.filter((item) => item.id == id);
      articles = articles.filter((item) => item.id != id);

      document.getElementById("title").value = articleToUpdate[0].title;
      document.getElementById("body").value = articleToUpdate[0].body;
      document.getElementById("tag").value = articleToUpdate[0].tag;

      document
        .getElementById("AddArticleForm")
        .addEventListener("submit", (event) => {
          event.preventDefault();

          const title = document.getElementById("title").value;
          const body = CKEDITOR.instances.body.getData();
          const tag = document.getElementById("tag").value;
          const Article = {
            id,
            title,
            body,
            image: articleToUpdate[0].image,
            tag,
            comments: articleToUpdate[0].comments,
            likes: articleToUpdate[0].likes,
            postedDate: articleToUpdate[0].postedDate,
          };

          articles.push(Article);
          localStorage.setItem("articles", JSON.stringify(articles));

          window.open("./view-article.html", "self");
        });
    } else {
      document.getElementById("file").required = "";
      var image;
      document.getElementById("file").addEventListener("change", (e) => {
        const file = e.target.files[0];
        const reader = new FileReader();
        reader.onloadend = () => {
          const base64String = reader.result
            .replace("data:", "")
            .replace(/^.+,/, "");
          image = base64String;
          // document.body.style.background = `url(data:image/png;base64,${base64String})`;
        };
        reader.readAsDataURL(file);
      });

      document
        .getElementById("AddArticleForm")
        .addEventListener("submit", (event) => {
          event.preventDefault();
          const title = document.getElementById("title").value;
          const body = CKEDITOR.instances.body.getData();
          const tag = document.getElementById("tag").value;

          var today = new Date();
          var dd = String(today.getDate()).padStart(2, "0");
          var mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
          var yyyy = today.getFullYear();

          today = dd + "/" + mm + "/" + yyyy;

          const postedDate = today;
          const Article = {
            id: Math.floor(Math.random() * 1000000),
            title,
            body,
            image: image,
            tag,
            comments: [],
            likes: [],
            postedDate,
          };
          var articles = JSON.parse(localStorage.getItem("articles") || "[]");
          // Put the object into storage
          articles.push(Article);
          localStorage.setItem("articles", JSON.stringify(articles));
          window.open("./view-article.html", "self");
        });
    
      let 
    if(data == null){
      alert("incorect credentials")
    }else if( dat.forEach(item => {
      data.email === email && 
    })){
      location.assign('dashbord.html')
    }else{
      alert('data not found')

    }


 npm install --save mocha chai
$ npm install --save request
$ npm install --save express

$ npx mocha --reporter spec

dont use touch to create file in vscode instead

code -r newFile.js

to opeen an existing file use the command
code -r fileName.js
###########################################################################


//posts();
//query();
//comments();
let update = false;

// getting form elements for creating new article
//CKEDITOR.replace('content');

/*ClassicEditor.create(document.querySelector("#content"))
  .catch((error) => {
    console.error(error);
  });*/

let title = document.getElementById('title');
let authorName = document.getElementById('author');
let content = document.getElementById('content');
//let content = CKEDITOR.instances.body.getData();
let coverImage = document.getElementById('cover-image');
let articleForm = document.getElementById('article-form');

// add event to form
articleForm.addEventListener('submit', (e) => {
    e.preventDefault();
    checkInputs();
    
} );

// function to check input
const checkInputs = () => {
    const titleValue = title.value;
    const authorNameValue = authorName.value;
    const contentValue = content.value;
    const coverImageFile = coverImage.value;
    
    if(titleValue === ''){
        setErrorFor(title, 'Title can not be blank');
    }else if(authorNameValue === ''){
        setErrorFor(authorName, "Author cannot be blank");
    }else if(contentValue ===''){
        setErrorFor(content, "content field cannot be blank")

    }else{
       /*if(update){
        updateArticle(titleValue, authorNameValue, contentValue)
        alert('article updated successfully!');
        location.reload()
       }else{
            addArticle(titleValue, authorNameValue, contentValue, coverImageFile);
            title.value = '';
            authorName.value = '';
            content.value = '';
            location.reload()
       }*/
       addArticle(titleValue, authorNameValue, contentValue);

       
        
    }
}
const  setSuccessFor = (input) => {
    const formControl = input.parentElement;
    formControl.className = 'form-control success';
}

const setErrorFor = (input, message) => {
    const formControl = input.parentElement;
    const small = formControl.querySelector('small');
    formControl.className = 'form-control error';
    small.innerText = message;
}

// save article into local storage
/*const Article = {
    head:string,
    author:string,
    body:string,
    coverPhoto:string,
    likes: number
    comments:[]
};*/

//const articles = JSON.parse(localStorage.getItem("articles")) || [];

/*const addArticle = (head, author, body) => {
     let Article = {
       id:Math.floor(Math.random() * 10000),
        head,
        author,
        coverImage,
        body,
        likes:0,
        comments:[],
    }
    articles.push(Article);
	    
    localStorage.setItem("articles", JSON.stringify(articles));
    alert('A post added successfully!! :(');
    location.reload();
};*/
const user = JSON.parse(localStorage.getItem("logedInUser"));

const addArticle = (title, author, content) => {

    let reqHeader = new Headers();
    reqHeader.append("Content-type", "application/json");
    reqHeader.append("Authorization", `Bearer ${user.token}`);
    
    //console.log(reqHeader)

    let raw = JSON.stringify({
        "title":title,
        "authorName":author,
        "content":content,
        
    });

    let requestOptions = {
        method: 'POST',
        headers:reqHeader,
        body:raw,
        redirect:'follow'
    };

    fetch("https://tsamuel-brand-app.herokuapp.com/article", requestOptions)
        .then(response => response.json())
        .then(result => {
            alert("article added successfully!")
            //console.log(result)

        })
        .catch(error => console.log('error', error));

}   

const retrieveArticles = () => {
    let requestOptions = {
        method: 'GET',
        redirect: 'follow'
    }

    fetch("https://tsamuel-brand-app.herokuapp.com/article/", requestOptions)
        .then(response => response.json())
        .then(result => {
            //alert("article added successfully!")
            //console.log(result)

            let list = document.getElementById('post-crud');
            list.innerHTML += `
            <table>
                <thead class="char-size ">
                    <th class="pd-l">Artice ID </th>
                    <th class="pd-l">Title</th>
                    <th class="pd-l">Author</th>
                    <th class="pd-l">Date</th>
                </thead>
            `;
    
            result.forEach( article => {
                list.innerHTML += ` <b>
                    <tr >
                    
                        <td class="">${article._id}</td>  &nbsp;  &nbsp; &nbsp;  &nbsp;
                        <td class="pd-l">${article.title}</td> &nbsp;  &nbsp; &nbsp;  &nbsp;
                        <td class="pd-l">${article.authorName}</td> &nbsp;  &nbsp; &nbsp;  &nbsp;
                        <td class="pd-l">${article.createdAt}</td> &nbsp;  &nbsp; &nbsp;  &nbsp;
                        <td class="pd-l">
                        
                            <button onclick="updater('${article._id}','${article.title}','${article.authorName}','${article.content}')">
                                <i class = "fa fa-edit"></i>
                            </button>
                            <button onclick="deleteArticle('${article._id}')">
                                <i class="fa  fa-trash col-s "></i>
                            </button>
                           
                        
                        </td>
                    </tr>
                    </b>
                    <br> <br>
                `;
            //onclick = "update('${article._id}','${article.title}','${article.authorName}','${article.content}')"
            });
           
        })
        .catch(error => console.log('error', error));
};

/*<div class="card card-sized" id="${article._id}">
                    <h2 class="center">${article.title}</h2>
                    <P class="col-primary">Author: ${article.authorName}</P>
                    <img class="" src="images/blog.jpg" alt="article-picture"/>
                    <div>
                        <button class="update" id="update" >
                            <a href=""> update </a>
                         </button>
                        <button class="delete" id="delete"  > 
                            <a href="" onckick= "deleteArticle(${article._id})" > delete </a>
                        </button>
                    </div>
                    <p>
                    ${article.content} 
                    </p>
                    
                </div>*/
/*
function imgStr(){
    coverImage.addEventListener('change',(e) => {
			
        const reader = new FileReader()
        const file = e.target.files[0];
        reader.readAsDataURL(file);
        reader.addEventListener('load', () => {
            return img = reader.result
            //console.log(img)
        });
        //console.log(img)
    
    });
}*/

//console.log(imgStr())

/*	

coverImage.addEventListener('change', (e)=>{
    const file = e.target.files[0];
      const reader = new FileReader();
      reader.onloadend = () => {
        const base64String = reader.result.replace('data:', '').replace(/^.+,/, '');
        localStorage.setItem('wallpaper', base64String);
        document.body.style.background = `url(data:image/png;base64,${base64String})`;
      };
      reader.readAsDataURL(file);
  })*/

// access buttons

/*function posts(){
    let list = document.getElementById('post-crud');
    const articles = JSON.parse(localStorage.getItem('articles'));

    // loop through articles

    for(let i=0; i<articles.length; i++){

        list.innerHTML += `
        <div class="card card-sized" id="${articles[i].id}">
            <h2 class="center">${articles[i].head}</h2>
            <P class="col-primary">Author: ${articles[i].author}</P>
            <img class="" src="images/blog.jpg" alt="article-picture"/>
            <div>
                <button class="update" id="update">Update</button>
                <button class="delete" id="delete"> Delete</button>
            </div>
            <p>
            ${articles[i].body} 
            </p>
            
        </div>

        `;
       

    }
    let cards = document.querySelectorAll('.card');
    let key = cards.length -1;

    cards.forEach( card => {
        card.addEventListener('click', () => {
            key = card.id;
            localStorage.setItem('key',key);
        })
    })

}
const updateButton = document.querySelectorAll('.update')
const deleteButton = document.querySelectorAll('.delete');

updateButton.forEach(btn =>{
    btn.addEventListener('click', ()=>{
        update = true;
        
        postDiv.style.display = "none";
        createPostDiv.style.display = "block";
        document.getElementById('upload').value = "UPDATE";
        updateArticle();
    });
})

deleteButton.forEach( btn => {
    btn.addEventListener('click', () =>{
        deleteArticle();
    });
});*/

//function to delete article
/*let deleteArticle = () =>{
    const articles = JSON.parse(localStorage.getItem('articles'));
    const key = JSON.parse(localStorage.getItem('key'));
    let article = articles.filter( item => item.id === key)[0];
    let index = articles.indexOf(article);
    articles.splice(index,1);
    localStorage.setItem("articles", JSON.stringify(articles));
    alert('Article deleted successfully')
    location.reload()
}*/

let deleteArticle = (id) =>{
    
    let reqHeader = new Headers();
    reqHeader.append("Authorization", `Bearer ${user.token}`);

    let requestOptions = {
        method:'DELETE',
        headers: reqHeader,
        redirect:'follow'
    }
    fetch(`https://tsamuel-brand-app.herokuapp.com/article/${id}`, requestOptions)
        .then(response => response.json())
        .then(result => {
            //console.log(result);
            alert(result.message);
        })
        .catch(error => console.log('error', error));
}

//deleteArticle()
// function to update article

/*let updateArticle = (id, title,author, content) => {
    console.log(id);
    console.log(title);
    console.log(author);
    console.log(content);

    /*let articles = JSON.parse(localStorage.getItem('articles'));
    const key = JSON.parse(localStorage.getItem('key'));
    let article = articles.filter( item => item.id === key);
    articles = articles.filter(item => item.id != key);
    
    console.log(article[0].head);
     document.getElementById('title').value = article.head;
     document.getElementById('author').value = article.author;
     document.getElementById('content').value = article.body;  

    let Article = {
        id:key,
         head,
         author,
         coverImage:article[0].coverImage,
         body,
         likes:article[0].likes,
         comments:article[0].comments,
     }
     articles.push(Article);
         
     localStorage.setItem("articles", JSON.stringify(articles));
}*/
let updater = (id, title, authorName, content) => {
    const article = {
        id,
        title,
        authorName,
        content
    };
    localStorage.setItem('tobeUpdated',JSON.stringify(article));

    createPostDiv.style.display = 'block';  
    postDiv.style.display = 'none';
    dashboardDiv.style.display = 'none';
    queryDiv.style.display = 'none';

    document.getElementById('cover').innerHTML = "Update Article";
    

};

let updateArticle = () => {

    let reqHeader = new Headers();
    reqHeader.append("Content-type", "application/json");
    reqHeader.append("Authorization", `Bearer ${user.token}`);
    
    //console.log(reqHeader)

    let raw = JSON.stringify({
        "title":title,
        "authorName":author,
        "content":content,
        
    });

    let requestOptions = {
        method: 'PATCH',
        headers:reqHeader,
        body:raw,
        redirect:'follow'
    };

    fetch(`https://tsamuel-brand-app.herokuapp.com/article/${id}`, requestOptions)
        .then(response => response.json())
        .then(result => {
            alert("article updated successfully!")
            //console.log(result)

        })
        .catch(error => console.log('error', error));


    
}


// DISPLAY QUERY ON DASHBOARD
function query(){
    let list = document.getElementById('query-content');
    const queries = JSON.parse(localStorage.getItem('queries'));

    // loop through articles

    for(let i=0; i<queries.length; i++){

    list.innerHTML += `
            <div class="query-item bg-3 margin">
                <label for="names" class="margin"><b>Names:</b>${queries[i].name}</label> <br>
                <label for="names" class="margin"><b>Email:</b>${queries[i].email}</label>
                <div class="message margin">
                    ${queries[i].content}
                </div>
                <i class="col-s margin">Reply</i>
            </div>
    `;
        
    }
}

// comments
function comments(){
    let list = document.getElementById('recent-comment');
    const comments = JSON.parse(localStorage.getItem('comments'));
    // loop through comments
    let l = comments.length;
    for(let i=0; i<l; i++){

    list.innerHTML += `
            <div class="query-item bg-3 margin">
                <label for="names" class="margin"><b>Name:</b>${comments[i].name}</label> <br>
                <label for="names" class="margin"><b>Article:</b>${comments[i].article}</label><br>
                <label for="names" class="margin"><b>Date:</b>${comments[i].today}</label><br>
                   <b> ${comments[i].content}  </b>   
            </div>
    `;
    }
}

